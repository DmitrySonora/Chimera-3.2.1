#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –•–∏–º–µ—Ä–∞ 2.0
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ Pydantic –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from datetime import datetime


def print_section(title: str):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print(f"{'='*60}")


def print_ok(message: str):
    """–í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    print(f"‚úÖ {message}")


def print_error(message: str):
    """–í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏"""
    print(f"‚ùå {message}")


def check_pydantic_models():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö Pydantic –º–æ–¥–µ–ª–µ–π"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ Pydantic –º–æ–¥–µ–ª–µ–π")
    
    errors = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ ActorMessage
    try:
        from actors.messages import ActorMessage, MESSAGE_TYPES
        msg = ActorMessage.create(
            sender_id="test",
            message_type=MESSAGE_TYPES['PING'],
            payload={"test": "data"}
        )
        assert msg.sender_id == "test"
        assert msg.message_type == MESSAGE_TYPES['PING']
        assert msg['sender_id'] == "test"  # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        print_ok("ActorMessage - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
    except Exception as e:
        errors.append(f"ActorMessage: {str(e)}")
        print_error(f"ActorMessage: {str(e)}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ BaseEvent
    try:
        from actors.events import BaseEvent
        event = BaseEvent.create(
            stream_id="test_stream",
            event_type="TestEvent",
            data={"key": "value"},
            version=0
        )
        assert event.stream_id == "test_stream"
        assert event.version == 0
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        try:
            event.version = 1
            errors.append("BaseEvent: –Ω–µ –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω—ã–π!")
        except Exception:
            pass  # –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        print_ok("BaseEvent - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—é—Ç")
    except Exception as e:
        errors.append(f"BaseEvent: {str(e)}")
        print_error(f"BaseEvent: {str(e)}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ UserSession
    try:
        from actors.user_session_actor import UserSession
        session = UserSession(user_id="test_user")
        session.current_mode = "expert"
        session.mode_confidence = 0.8
        session.mode_history = ["talk", "expert", "expert"]
        assert session.current_mode == "expert"
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        try:
            session.mode_confidence = 1.5  # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞
            errors.append("UserSession: –Ω–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ confidence")
        except Exception:
            pass  # –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        print_ok("UserSession - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
    except Exception as e:
        errors.append(f"UserSession: {str(e)}")
        print_error(f"UserSession: {str(e)}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    try:
        from models.structured_responses import (
            BaseResponse, TalkResponse, ExpertResponse, CreativeResponse,
            parse_response
        )
        
        # –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å
        base = BaseResponse(response="–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
        assert base.response == "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"
        
        # Talk –º–æ–¥–µ–ª—å
        talk = TalkResponse(
            response="–ü—Ä–∏–≤–µ—Ç!",
            emotional_tone="–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
            engagement_level=0.7
        )
        assert talk.engagement_level == 0.7
        
        # Expert –º–æ–¥–µ–ª—å
        expert = ExpertResponse(
            response="–û—Ç–≤–µ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞",
            confidence=0.9,
            sources=["–∏—Å—Ç–æ—á–Ω–∏–∫ 1", "–∏—Å—Ç–æ—á–Ω–∏–∫ 2"]
        )
        assert len(expert.sources) == 2
        
        # Creative –º–æ–¥–µ–ª—å
        creative = CreativeResponse(
            response="–¢–≤–æ—Ä—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç",
            style_markers=["–º–µ—Ç–∞—Ñ–æ—Ä–∞"],
            metaphors=["–∂–∏–∑–Ω—å –∫–∞–∫ —Ä–µ–∫–∞"]
        )
        assert "–º–µ—Ç–∞—Ñ–æ—Ä–∞" in creative.style_markers
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∏–∑ JSON
        parsed = parse_response('{"response": "–¢–µ—Å—Ç"}', mode='base')
        assert parsed.response == "–¢–µ—Å—Ç"
        
        print_ok("–ú–æ–¥–µ–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ - –≤—Å–µ 4 —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç–∞—é—Ç")
    except Exception as e:
        errors.append(f"Structured responses: {str(e)}")
        print_error(f"Structured responses: {str(e)}")
    
    return len(errors) == 0, errors


def check_mode_parameters():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∂–∏–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    try:
        from config.prompts import MODE_GENERATION_PARAMS, GENERATION_PARAMS_LOG_CONFIG
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
        required_modes = ['base', 'talk', 'expert', 'creative']
        for mode in required_modes:
            if mode not in MODE_GENERATION_PARAMS:
                print_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ '{mode}'")
                return False, [f"Missing mode: {mode}"]
            
            params = MODE_GENERATION_PARAMS[mode]
            print(f"\n–†–µ–∂–∏–º '{mode}':")
            print(f"  ‚Ä¢ temperature: {params.get('temperature', '–Ω–µ –∑–∞–¥–∞–Ω–∞')}")
            print(f"  ‚Ä¢ max_tokens: {params.get('max_tokens', '–Ω–µ –∑–∞–¥–∞–Ω')}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        print("\n–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"  ‚Ä¢ log_parameters_usage: {GENERATION_PARAMS_LOG_CONFIG.get('log_parameters_usage', False)}")
        print(f"  ‚Ä¢ log_response_length: {GENERATION_PARAMS_LOG_CONFIG.get('log_response_length', False)}")
        print(f"  ‚Ä¢ debug_mode_selection: {GENERATION_PARAMS_LOG_CONFIG.get('debug_mode_selection', False)}")
        
        print_ok("–í—Å–µ —Ä–µ–∂–∏–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –º–µ—Å—Ç–µ")
        return True, []
        
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {str(e)}")
        return False, [str(e)]


async def check_basic_integration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    
    errors = []
    
    try:
        from actors.actor_system import ActorSystem
        from actors.events import EventStore
        from actors.user_session_actor import UserSessionActor
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        system = ActorSystem("test")
        print_ok("ActorSystem —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º Event Store
        event_store = EventStore()
        system.set_event_store(event_store)
        print_ok("EventStore –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–æ—Ä
        actor = UserSessionActor()
        await system.register_actor(actor)
        print_ok("UserSessionActor –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É
        assert actor.get_actor_system() is not None
        print_ok("–ê–∫—Ç–æ—Ä –∏–º–µ–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ ActorSystem")
        
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
        session = actor._sessions.get("test") or await actor._get_or_create_session("test", None)
        mode, confidence = actor._determine_generation_mode("–û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É", session)
        assert mode == "expert"
        print_ok(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: '{mode}' —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {confidence:.2f}")
        
        return True, []
        
    except Exception as e:
        errors.append(str(e))
        print_error(f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {str(e)}")
        return False, errors


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("\n" + "="*60)
    print("üê≤ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –•–ò–ú–ï–†–ê 2.0")
    print("="*60)
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    all_ok = True
    all_errors = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Pydantic –º–æ–¥–µ–ª–µ–π
    ok, errors = check_pydantic_models()
    all_ok &= ok
    all_errors.extend(errors)
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    ok, errors = check_mode_parameters()
    all_ok &= ok
    all_errors.extend(errors)
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    ok, errors = await check_basic_integration()
    all_ok &= ok
    all_errors.extend(errors)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print_section("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    
    if all_ok:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û! üéâ")
        print("\n–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ:")
        print("  ‚úÖ Pydantic –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("  ‚úÖ –†–µ–∂–∏–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("  ‚úÖ –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print("\nüê≤ –•–∏–º–µ—Ä–∞ 2.0 –≥–æ—Ç–æ–≤–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!")
    else:
        print(f"\n‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ ({len(all_errors)} –æ—à–∏–±–æ–∫):")
        for i, error in enumerate(all_errors, 1):
            print(f"  {i}. {error}")
        print("\n‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º")
    
    print("\n" + "="*60)
    return all_ok


if __name__ == "__main__":
    ok = asyncio.run(main())
    sys.exit(0 if ok else 1)