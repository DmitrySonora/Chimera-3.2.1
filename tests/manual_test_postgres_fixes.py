#!/usr/bin/env python3
"""
–†—É—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π PostgreSQL Event Store
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from actors.events import BaseEvent, EventStore
from actors.events.postgres_event_store import PostgresEventStore
from database.event_store_migrator import EventStoreMigrator
from config.logging import setup_logging
from config.settings import EVENT_STORE_TYPE


async def test_1_event_order_preservation():
    """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –±—É—Ñ–µ—Ä"""
    print("\n=== –¢–ï–°–¢ 1: –ü–æ—Ä—è–¥–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö ===")
    
    # –°–æ–∑–¥–∞–µ–º in-memory store –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    store = PostgresEventStore()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –±—É—Ñ–µ—Ä
    events = []
    for i in range(5):
        event = BaseEvent.create(
            stream_id="test_order",
            event_type="OrderTest",
            data={"sequence": i},
            version=i
        )
        events.append(event)
        store._write_buffer.append(event)
    
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤ –±—É—Ñ–µ—Ä–µ: {[e.data['sequence'] for e in store._write_buffer]}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –æ—à–∏–±–∫–µ
    returned_events = list(store._write_buffer)
    store._write_buffer.clear()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    for event in reversed(returned_events):
        store._write_buffer.appendleft(event)
    
    print(f"–ü–æ—Ä—è–¥–æ–∫ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞: {[e.data['sequence'] for e in store._write_buffer]}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    is_correct = all(
        store._write_buffer[i].data['sequence'] == i 
        for i in range(len(store._write_buffer))
    )
    
    if is_correct:
        print("‚úÖ PASS: –ü–æ—Ä—è–¥–æ–∫ —Å–æ–±—ã—Ç–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ùå FAIL: –ü–æ—Ä—è–¥–æ–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Ä—É—à–µ–Ω!")
    
    return is_correct


async def test_2_atomic_migration():
    """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Ç–æ–∫–æ–≤"""
    print("\n=== –¢–ï–°–¢ 2: –ê—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ ===")
    
    # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    source = EventStore()
    
    # –î–æ–±–∞–≤–ª—è–µ–º 3 –ø–æ—Ç–æ–∫–∞ —Å —Ä–∞–∑–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–±—ã—Ç–∏–π
    streams_data = {
        "stream_small": 5,
        "stream_medium": 50,
        "stream_large": 200
    }
    
    for stream_id, count in streams_data.items():
        for i in range(count):
            event = BaseEvent.create(
                stream_id=stream_id,
                event_type="TestEvent",
                data={"index": i},
                version=i
            )
            await source.append_event(event)
    
    print(f"–°–æ–∑–¥–∞–Ω–æ –ø–æ—Ç–æ–∫–æ–≤: {len(streams_data)}")
    for stream_id, count in streams_data.items():
        print(f"  - {stream_id}: {count} —Å–æ–±—ã—Ç–∏–π")
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ç–æ—Ä
    migrator = EventStoreMigrator()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ _migrate_stream
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞: –º–µ—Ç–æ–¥ _migrate_stream –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å _write_stream_events")
    
    # –ß–∏—Ç–∞–µ–º –∫–æ–¥ –º–µ—Ç–æ–¥–∞
    import inspect
    method_source = inspect.getsource(migrator._migrate_stream)
    
    if "_write_stream_events" in method_source:
        print("‚úÖ PASS: –ú–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Ç–æ–º–∞—Ä–Ω—É—é –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ _write_stream_events")
        return True
    else:
        print("‚ùå FAIL: –ú–µ—Ç–æ–¥ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Ç–æ–º–∞—Ä–Ω—É—é –∑–∞–ø–∏—Å—å")
        return False


async def test_3_advisory_lock_keys():
    """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–≤–æ–π–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è advisory locks"""
    print("\n=== –¢–ï–°–¢ 3: –î–≤–æ–π–Ω—ã–µ –∫–ª—é—á–∏ advisory locks ===")
    
    try:
        from actors.events.postgres_event_store import generate_stream_lock_keys
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è generate_stream_lock_keys –Ω–∞–π–¥–µ–Ω–∞")
    except ImportError:
        print("‚ùå FAIL: –§—É–Ω–∫—Ü–∏—è generate_stream_lock_keys –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª—é—á–µ–π
    test_streams = [
        "user_123",
        "session_abc",
        "dlq_actor1",
        "very_long_stream_id_that_should_still_work_correctly"
    ]
    
    print("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö stream_id:")
    
    all_keys = set()
    for stream_id in test_streams:
        high_key, low_key = generate_stream_lock_keys(stream_id)
        print(f"  {stream_id}: ({high_key}, {low_key})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª—é—á–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ int32
        if not (-2**31 <= high_key < 2**31 and -2**31 <= low_key < 2**31):
            print("    ‚ùå –ö–ª—é—á–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ int32!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä—ã
        key_pair = (high_key, low_key)
        if key_pair in all_keys:
            print("    ‚ùå –ö–æ–ª–ª–∏–∑–∏—è –∫–ª—é—á–µ–π!")
            return False
        all_keys.add(key_pair)
    
    print("\n‚úÖ PASS: –í—Å–µ –∫–ª—é—á–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã –∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ _write_stream_events
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ _write_stream_events:")
    store = PostgresEventStore()
    import inspect
    method_source = inspect.getsource(store._write_stream_events)
    
    if "generate_stream_lock_keys" in method_source and "pg_advisory_xact_lock($1, $2)" in method_source:
        print("‚úÖ PASS: –ú–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤–æ–π–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è advisory lock")
        return True
    else:
        print("‚ùå FAIL: –ú–µ—Ç–æ–¥ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤–æ–π–Ω—ã–µ –∫–ª—é—á–∏")
        return False


async def test_4_integration_check():
    """–¢–µ—Å—Ç 4: –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\n=== –¢–ï–°–¢ 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ EVENT_STORE_TYPE –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å
    print(f"–¢–µ–∫—É—â–∏–π EVENT_STORE_TYPE: {EVENT_STORE_TYPE}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    files_to_check = [
        "actors/events/postgres_event_store.py",
        "database/connection.py",
        "database/event_store_migrator.py",
        "database/migrations/001_create_events_table.sql"
    ]
    
    all_exist = True
    for file_path in files_to_check:
        path = Path(file_path)
        exists = path.exists()
        print(f"  {file_path}: {'‚úÖ' if exists else '‚ùå'}")
        if not exists:
            all_exist = False
    
    if all_exist:
        print("\n‚úÖ PASS: –í—Å–µ —Ñ–∞–π–ª—ã PostgreSQL –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True
    else:
        print("\n‚ùå FAIL: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return False


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    setup_logging()
    
    print("=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô PostgreSQL Event Store")
    print("=" * 60)
    
    results = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    results.append(("–ü–æ—Ä—è–¥–æ–∫ —Å–æ–±—ã—Ç–∏–π", await test_1_event_order_preservation()))
    results.append(("–ê—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏", await test_2_atomic_migration()))
    results.append(("Advisory locks", await test_3_advisory_lock_keys()))
    results.append(("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", await test_4_integration_check()))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name}: {status}")
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    
    if passed == total:
        print("\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í–ù–ï–î–†–ï–ù–´ –ö–û–†–†–ï–ö–¢–ù–û!")
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏")


if __name__ == "__main__":
    asyncio.run(main())